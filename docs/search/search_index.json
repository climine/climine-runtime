{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Climine Runtime is a lightweight, straightforward and fault-tolerant runtime environment for web development designed to streamline the process of building dynamic websites, without the complexity of traditional backend setups or server-side scripting languages. With Climine Runtime, developers can easily convert static HTML/CSS/JS designs into dynamic web applications by integrating API responses directly into their HTML markup.</p>"},{"location":"#who-is-it-for","title":"Who is it for?","text":"<ul> <li> <p>Beginners: Climine Runtime offers a user-friendly solution for those new to web development, providing a gentle introduction to dynamic web content.</p> </li> <li> <p>Small Projects: For quickly prototyping and deploying simple dynamic websites without the need for extensive backend infrastructure.</p> </li> <li> <p>API Integration: Climine Runtime is perfect for integrating API responses directly into your HTML markup, allowing you to build dynamic web applications with ease.</p> </li> </ul>"},{"location":"#knowledge-prerequisites","title":"Knowledge Prerequisites","text":"<ul> <li> <p>HTML/CSS/JS: A basic understanding of HTML, CSS, and JavaScript is required to get started with Climine Runtime.</p> </li> <li> <p>APIs: Familiarity with APIs and how to consume them will be beneficial when integrating external data sources into your web applications.</p> </li> <li> <p>Javascript Object Notation (JSON): Understanding JSON data structures will be helpful when working with API responses and configuration files.</p> </li> </ul>"},{"location":"compile/","title":"Compile","text":""},{"location":"compile/#compiling-your-project","title":"Compiling your project","text":"<p>To compile your project, you can use the <code>compile</code> flag with the <code>climine</code> command. The <code>compile</code> flag compiles your Climine Runtime project into a Climine Runtime Server (Node.JS) that can be run locally or deployed to a cloud platform.</p> <p>Info</p> <p>To use the <code>compile</code> flag, you need to have npm installed on your system.</p> <p>Here's how you can compile your project:</p> <pre><code>climine --config path/to/config.json --compile\n</code></pre> <p>Replace <code>path/to/config.json</code> with the path to your Climine Runtime Page Configuration file.</p> <p>After running the command, a <code>dist</code> directory will be created in the root of your project (where the <code>config.json</code> file is located). The <code>dist</code> directory contains the compiled Climine Runtime Server that can be run locally or deployed to a cloud platform. The compiled Climine Runtime Server is a Node.JS application that can be run using the <code>node</code> command.</p> <p>Note</p> <p>To run the compiled Climine Runtime Server, you need to have Node.JS installed on your system.</p> <p>To run the compiled Climine Runtime Server locally, you can use the following command:</p> <pre><code>node dist/index.cjs\n</code></pre>"},{"location":"config/","title":"Introduction","text":"<p>The configuration file is a JSON file that contains the configuration for a Climine Runtime application. The configuration file is optional and if not provided, the default configuration will be used. The configuration file's path can be specified using the <code>--config</code> option when running the application. The configuration file should be a JSON object.</p> <p>The following is an example of a configuration file:</p> config.json<pre><code>{\n    \"port\": 3000,\n    \"dir\": \"./\",\n    \"env\": \".env\",\n    \"errors\": {\n        \"404\": \"/error/404\",\n        \"500\": \"/error/500\"\n    }\n}\n</code></pre>"},{"location":"cookie/","title":"Cookies","text":""},{"location":"cookie/#setting-cookies-in-climine-runtime-applications","title":"Setting Cookies in Climine Runtime Applications","text":"<p>The <code>cookie</code> property allows you to set cookies in the response headers of your Climine Runtime application. </p> <p>Cookies are small pieces of data that are stored on the client-side by the web browser. They are commonly used to store user session information, user preferences, and other data that needs to persist across multiple requests. Cookies are sent by the server in the response headers and stored by the browser, which then sends them back to the server with subsequent requests.</p> <p>By default, the Climine Runtime does not set any cookies in the response headers. However, you can specify a <code>cookie</code> property in the configuration file to set cookies in the response headers of a specific page.</p>"},{"location":"cookie/#syntax","title":"Syntax","text":"<p>The <code>cookie</code> property is an array of objects, where each object represents a cookie to be set in the response headers. Each cookie object can have the following properties:</p> <ul> <li><code>key</code> (required): The name of the cookie.</li> <li><code>value</code> (required): The value of the cookie.</li> <li><code>path</code> (optional): The path for which the cookie is valid. Defaults to <code>/</code>.</li> <li><code>domain</code> (optional): The domain for which the cookie is valid. Defaults to the domain of the request.</li> <li><code>expires</code> (optional): The expiration date of the cookie. Should be a valid date string in the format <code>YYYY-MM-DDTHH:MM:SSZ</code>.</li> <li><code>secure</code> (optional): A boolean value indicating whether the cookie should only be sent over HTTPS. Defaults to <code>false</code>.</li> </ul> <p>The default values for the optional properties are as follows: - <code>path</code>: <code>/</code> - <code>domain</code>: The domain of the request - <code>expires</code>: None - <code>secure</code>: <code>false</code></p>"},{"location":"cookie/#example","title":"Example","text":"index.json<pre><code>{\n    \"cookie\": [\n        {\n            \"key\": \"session_id\",\n            \"value\": \"123456\",\n            \"path\": \"/\",\n            \"domain\": \"example.com\",\n            \"expires\": \"2024-05-31T23:59:59Z\",\n            \"secure\": true\n        }\n    ]\n}\n</code></pre> <p>In this example, a cookie named <code>session_id</code> with the value <code>123456</code> is set in the response headers of the page. The cookie is valid for the entire domain <code>example.com</code>, has an expiration date of May 31, 2024, and should only be sent over HTTPS.</p> <p>Note</p> <p>The <code>cookie</code> property can be specified in any page configuration file to set cookies in the response headers of that page. Cookies are sent to the client in the response headers and stored by the browser for future requests.</p>"},{"location":"cookie/#accessing-cookies-in-climine-runtime-applications","title":"Accessing Cookies in Climine Runtime Applications","text":"<p>Cookies set in the response headers can be accessed in subsequent requests made by the client. The browser automatically sends cookies back to the server with each request to the same domain.</p> <p>Climine Runtime automatically parses incoming cookies from the request headers and makes them available as a constant object <code>cookies</code>. Similar to the <code>memory</code> object, the <code>cookies</code> object allows you to access the values of cookies set by the server.</p>"},{"location":"cookie/#syntax_1","title":"Syntax","text":"<pre><code>{{ cookies[CookieName] }}\n</code></pre>"},{"location":"cookie/#example_1","title":"Example","text":"dashboard.json<pre><code>{\n    //requesting an API with the cookie value\n    \"user\": {\n        \"to\": \"https://api.example.com/data?id={{ cookies[session_id] }}\",\n        \"method\": \"GET\"\n    }\n}\n</code></pre> <p>In this example, the value of the <code>session_id</code> cookie set by the server is accessed using <code>{{ cookies[session_id] }}</code> and inserted into the API request URL. This allows you to maintain session information and personalize user experiences based on the cookie values.</p> <p>Cookies are a powerful mechanism for maintaining state and storing user-specific information in web applications. By setting and accessing cookies in your Climine Runtime application, you can create personalized experiences for users and maintain session information across multiple requests.</p> <p>Cookies can be accessed anywhere in your Climine Runtime application, including Page Template files.</p>"},{"location":"dir/","title":"dir","text":"<p>The <code>dir</code> property allows you to specify the directory where the Climine Runtime will look for files to serve.  By default, the Climine Runtime will serve files from the current working directory where the application is started.</p>"},{"location":"dir/#customizing-the-directory","title":"Customizing the Directory","text":"<p>In the configuration file, you can specify a custom directory for your Climine Runtime application. For example, if you want your application to serve files from a directory named <code>public</code>, you can set the dir property as follows:</p> config.json<pre><code>{\n    \"dir\": \"public\"\n}\n</code></pre> <p>With this configuration, your Climine Runtime application will serve files from the <code>public</code> directory instead of the current working directory. This can be useful if you have a specific folder structure for your application or if you want to separate static files from other project files.</p>"},{"location":"env/","title":"env","text":"<p>The <code>env</code> property allows you to specify the location of an environment variable file relative to the root directory of your Climine Runtime application, specified by the dir property.</p> <p>Environment variables are dynamic values that can affect the behavior of software applications. They are used to store configuration settings, sensitive information, and other parameters that may vary between different environments. Environment variables provide a flexible way to manage configuration values without hardcoding them into the application code.</p> <p>By default, the Climine Runtime does not load environment variables from a file. However, you can specify an env property in the configuration file to load environment variables from a file named <code>.env</code> located in a specific directory.</p>"},{"location":"env/#example","title":"Example:","text":"config.json<pre><code>{\n    \"env\": \".env\"\n}\n</code></pre> <p>In this example, the Climine Runtime will load environment variables from a file named <code>.env</code> located in the root directory of the application. The file should contain key-value pairs in the format <code>KEY=VALUE</code>, with each pair on a separate line.</p> <p><code>.env</code>: .env<pre><code>API_KEY=your-api-key\nsecret=your-secret\n</code></pre></p>"},{"location":"env_var/","title":"Environment Variables","text":"<p>These are variables that are sourced from the environment in which Climine Runtime is running. They are typically defined outside of your Climine Runtime configuration and can be accessed within your Climine Runtime Page Configuration files. Environment variables provide a convenient way to store sensitive information like API keys, database credentials, and configuration settings.</p>"},{"location":"env_var/#accessing-environment-variables","title":"Accessing Environment Variables","text":"<p>To access an environment variable in your Climine Runtime Page Configuration file:</p> <ol> <li> <p>Define the environment variable in the environment where Climine Runtime is running. Click here to learn how to define environment variables.</p> </li> <li> <p>Import the environment variable in your Climine Runtime Page Configuration file using the following syntax:     index.json<pre><code>{\n    \"use\": [\"ENV_VAR_NAME\"]\n}\n</code></pre>     Replace <code>ENV_VAR_NAME</code> with the name of the environment variable you want to access.</p> <p>Note</p> <p><code>use</code> property expects an array of environment variable names. You can import multiple environment variables by providing their names in the array.</p> </li> <li> <p>Use the imported environment variable in your Climine Runtime Page Configuration file.     Syntax: <code>{{ memory[ENV_VAR_NAME] }}</code> <pre><code>{\n    \"request1\": {\n        \"to\": \"http://www.randomnumberapi.com/api/v1.0/random?min={{min}}&amp;max={{max}}&amp;count={{count}}\",\n        \"method\": \"GET\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer {{memory[token]}}\"\n        }\n    }\n}\n</code></pre>     In this example, the <code>token</code> environment variable is used in the <code>Authorization</code> header of the <code>request1</code>'s endpoint.</p> </li> </ol> <p>Note</p> <p>From version 0.1.3 onwards, Climine Runtime supports accessing environment variables from the host environment. This means that you can define environment variables in your system environment and access them directly in your Climine Runtime Project without having to define them in a <code>.env</code> file. </p>"},{"location":"error/","title":"errors","text":"<p>The <code>errors</code> property in the configuration file is an object that contains a mapping of error codes to error pages. When an error occurs, Climine Runtime will redirect the user to the specified error page based on the error code. The error pages should be relative paths to the root directory of the application.</p>"},{"location":"error/#error-page-structure","title":"Error Page Structure","text":"<p>For each error code, you can specify either a static HTML file, a Climine Runtime Page Configuration or both (Climine Runtime Dynamic Page). Climine Runtime will use the specified files to render the error page content when the corresponding HTTP status code is encountered.</p> config.json<pre><code>{\n    \"errors\": {\n        \"404\": \"errors/not-found.html\",\n        \"500\": \"errors/server-error.html\"\n    }\n}\n</code></pre> <p>In the above example, Climine is configured to use the not-found.html file for handling 404 Not Found errors and the server-error.html file for handling 500 Internal Server Errors.</p> <p>Note</p> <p>Ensure that the paths specified in the errors object are relative to the root directory of your Climine Runtime application.</p>"},{"location":"example/","title":"Usage","text":"<p>Let's walk through an example of using Climine Runtime to create a simple dynamic website. We'll start by defining our project structure and then showcase the contents of the configuration files, HTML markup, and API request file.</p>"},{"location":"example/#project-structure","title":"Project Structure","text":"<pre><code>my-climine-project/\n\u251c\u2500\u2500 config.json\n\u251c\u2500\u2500 index.html\n\u2514\u2500\u2500 index.json\n</code></pre>"},{"location":"example/#configuration-configjson","title":"Configuration (config.json)","text":"config.json<pre><code>{\n    \"port\": 8080,\n    \"dir\": \"./\",\n    \"errors\": {\n        \"404\": \"/error/404/\"\n    }\n}\n</code></pre>"},{"location":"example/#api-request-file-indexjson","title":"API Request File (index.json)","text":"index.json<pre><code>{\n    \"request1\": {\n        \"to\": \"https://api.example.com/data&amp;q={{query}}\",\n        \"method\": \"GET\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        },\n        \"require\": {\n            \"query\": null\n        }\n    }\n}\n</code></pre>"},{"location":"example/#html-markup-indexhtml","title":"HTML Markup (index.html)","text":"index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;My Climine Project&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Welcome to Climine Runtime!&lt;/h1&gt;\n  &lt;p&gt;This is a dynamic website powered by Climine.&lt;/p&gt;\n  &lt;p&gt;Here's some dynamic content:&lt;/p&gt;\n  &lt;p&gt;{{ request1.responseKey }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In this example, <code>config.json</code> defines the configuration for the Climine Runtime. <code>index.html</code> contains the HTML markup, while <code>index.json</code> defines an API request that fetches dynamic data to be inserted into that HTML markup</p>"},{"location":"for_loop/","title":"For Loops","text":"<p>Climine Runtime supports simple for loops, allowing developers to iterate over arrays and generate repetitve content dynamically within Climine Runtime Page Template.</p>"},{"location":"for_loop/#syntax","title":"Syntax","text":"<p>The syntax for <code>for</code> loops in Climine Runtime follows a straightforward pattern:</p> index.html<pre><code>{% for key in array %}\n    &lt;!-- Content to display for each iteration --&gt;\n    {{ key }}\n{% endfor %}\n</code></pre> <p>In this syntax, <code>key</code> is a variable that represents the current element in the array being iterated over. The <code>array</code> variable is the array that the loop is iterating over.</p>"},{"location":"for_loop/#example","title":"Example","text":"<p>Here is an example of a simple <code>for</code> loop in Climine Runtime:</p> index.html<pre><code>{% for fruit in fruits %}\n    &lt;p&gt;{{ fruit }}&lt;/p&gt;\n{% endfor %}\n</code></pre> <p>In this example, the <code>for</code> loop iterates over an array called <code>fruits</code> and displays each element in a paragraph element.</p>"},{"location":"if_condition/","title":"If Statements","text":"<p>Climine Runtime supports conditional statements, allowing developers to control the flow of content based on specific conditions. Conditional statements can be used to display or hide content, execute different code blocks, or handle special cases within HTML files.</p>"},{"location":"if_condition/#if-condition","title":"If Condition","text":"<p>These conditions can involve comparisons, logical operations, or the evaluation of variables or expressions. Conditional statements are enclosed within {% if %} and {% endif %} tags, with an optional {% else %} tag for handling alternative cases.</p>"},{"location":"if_condition/#basic-if-condition","title":"Basic If Condition","text":"index.html<pre><code>{% if user[age] &gt;= 18 %}\n    &lt;p&gt;Welcome, you are an adult!&lt;/p&gt;\n{% endif %}\n</code></pre> <p>In this example, the content inside the <code>{% if %}</code> block is displayed only if the user's age is greater than or equal to 18.</p> <p>Warning</p> <p>If the variables used in the conditional statement are not defined or are invalid, it is set to 0 by default. Whereas, while displaying the value of a variable, if it is not defined or invalid, it is displayed as {{ key }}, where <code>key</code> is the variable name.</p>"},{"location":"if_condition/#if-else-condition","title":"If-Else Condition","text":"index.html<pre><code>{% if user[age] &gt;= 18 %}\n    &lt;p&gt;Welcome, you are an adult!&lt;/p&gt;\n{% else %}\n    &lt;p&gt;Sorry, you are a minor!&lt;/p&gt;\n{% endif %}\n</code></pre> <p>In this example, the content inside the <code>{% if %}</code> block is displayed if the user's age is greater than or equal to 18. Otherwise, the content inside the <code>{% else %}</code> block is displayed.</p> <p>Note</p> <p>The <code>{% else %}</code> block is optional and can be omitted if there is no need to handle alternative cases.</p>"},{"location":"if_condition/#nested-if-condition","title":"Nested If Condition","text":"<p>Climine Runtime supports nested if conditions, allowing developers to nest conditional statements within each other to handle complex logic and hierarchical structures. When nesting if conditions, it is must to use the [n] notation to differentiate between nested levels.</p> index.html<pre><code>{% if condition %}\n    &lt;!-- Outer if block content --&gt;\n    {% if[1] nestedCondition %}\n        &lt;!-- Inner if block content --&gt;\n    {% else[1] %}\n        &lt;!-- Inner else block content --&gt;\n    {% endif[1] %}\n{% else %}\n    &lt;!-- Outer else block content --&gt;\n{% endif %}\n</code></pre> <p>Nested if conditions can be used to create multi-level conditional statements that execute different code blocks based on multiple conditions.</p>"},{"location":"init/","title":"Initialize","text":""},{"location":"init/#initialize-a-new-project","title":"Initialize a new project","text":"<p>To initialize a new project, you can use the <code>init</code> flag with the <code>climine</code> command. The <code>init</code> flag creates a new Climine Runtime project in the current directory, by prompting you to enter the project details.</p> <p>Here's how you can initialize a new project:</p> <pre><code>climine --init directory_name\n</code></pre> <p>Replace <code>directory_name</code> with the name of the directory where you want to create the project.</p> <p>After running the command, you will be prompted to enter the following details:</p> <ul> <li>Project Name: Enter the name of the project.</li> <li>Version: Enter the version of the project.</li> <li>Description: Enter a brief description of the project.</li> <li>Directory: Enter the directory where you want to create the project. This is where the website files will be stored.</li> <li>Port: Enter the port number where you want to run the project. The default port is <code>8080</code>.</li> </ul> <p>Note</p> <p>The port number should be a valid port number lying in range 1024-49151. This is because ports below 1024 are reserved for system services and ports above 49151 are used for dynamic and private ports.</p> <p>Note</p> <p>The default directory for the project is the current directory where you run the command. </p>"},{"location":"installation/","title":"Installation","text":"<p>To install Climine Runtime, you have a couple of options:</p> <ul> <li> <p>Clone the repository:   <pre><code>git clone https://github.com/climine/climine-runtime.git\n</code></pre></p> </li> <li>Navigate to the project directory:   <pre><code>cd runtime\n</code></pre></li> <li>Install dependencies:   <pre><code>npm install\n</code></pre></li> <li>Build the project:   <pre><code>npm run build\n</code></pre></li> <li>The compiled binary will be available in the dist directory.</li> </ul> <p>That's it! You're now ready to use Climine Runtime.</p>"},{"location":"installation/#using-pre-built-binaries","title":"Using Pre-built Binaries","text":"<p>You can download pre-built binaries for your operating system from the Releases page. Once downloaded, extract the archive and add the executable to your system's PATH.</p>"},{"location":"installation/#compiling-from-source","title":"Compiling from Source","text":"<p>If pre-built binaries are unavailable for your operating system, you can compile Climine Runtime from source. Follow these steps:</p>"},{"location":"page/","title":"Introduction","text":"<p>The Page Configuration file is a JSON file, such as <code>index.json</code> or <code>about.json</code>, serves as a central hub for defining various options and configurations specific to a particular page within your Climine Runtime application. This JSON file allows you to specify endpoints, layout options, data sources, and more, providing granular control over the behavior and content of individual pages.</p>"},{"location":"page/#example-about-configuration","title":"Example: /about Configuration","text":"<p>The <code>about.json</code> file serves as a configuration file for defining the behavior and settings specific to the <code>about.html</code> page within your Climine Runtime application. This example illustrates how to configure endpoint for dynamic content retrieval.</p> <p><code>about.json</code> about.json<pre><code>\"request1\": {\n    \"to\": \"http://www.randomnumberapi.com/api/v1.0/random?min={{min}}&amp;max={{max}}&amp;count={{count}}\",\n    \"method\": \"GET\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer {{token}}\"\n    }\n}        \n</code></pre></p> <p>Now, the response of <code>request1</code> can be accessed in the <code>about.html</code> page using the following syntax:</p> about.html<pre><code>&lt;h1&gt;RANDOM NUMBER: {{request1}}&lt;/h1&gt;\n</code></pre>"},{"location":"param/","title":"Parameters","text":"<p>In web development, parameters are values that are passed to a web page or script through the URL or form inputs. These parameters can be used to customize the behavior of the page or script based on user input. In Climine Runtime, you can access parameters sent with GET and POST requests to your Climine Runtime Page Configuration files.</p> <ol> <li> <p>GET Parameters: (aka. Query Parameters) These parameters are appended to the end of a URL in a key-value format, separated by ampersands (&amp;). They are commonly used in HTTP GET requests to pass data from the client to the server. For example, in the URL <code>https://example.com/search?q=keyword&amp;page=1</code>, <code>q</code> and <code>page</code> are GET parameters with values <code>keyword</code> and <code>1</code>, respectively.</p> </li> <li> <p>POST Parameters: These parameters are included in the body of an HTTP request, typically used in HTTP POST requests. Unlike query parameters, which are visible in the URL, request body parameters are hidden from view and can contain more data. Example of POST parameters in a request body: <pre><code>{\n    \"username\": \"john_doe\",\n    \"password\": \"password123\"\n}\n</code></pre> In this example, <code>username</code> and <code>password</code> are POST parameters with values <code>john_doe</code> and <code>password123</code>, respectively.</p> </li> </ol> <p>Climine Runtime allows you to access parameters sent with GET and POST requests. These parameters can be used to customize the behavior of your Climine Runtime Page based on the user input.</p>"},{"location":"param/#accessing-parameters","title":"Accessing Parameters","text":"<p>Accessing parameters in Climine Runtime Page Configuration follows the same syntax as accessing environment variables. To access parameters in your Climine Runtime Page Configuration file, you can directly reference them using the <code>{{parameter_name}}</code> syntax.</p> <p>Here's an example of how you can access parameters in your Climine Runtime Page Configuration file: <pre><code>{\n    \"request1\": {\n        \"to\": \"https://api.example.com/search?q={{query}}&amp;page={{page}}\",\n        \"method\": \"GET\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n}\n</code></pre> In this example, the <code>query</code> and <code>page</code> parameters are accessed in the URL of <code>request1</code> to customize the search query and page number.</p> <p>Info</p> <p>The syntax to access parameters in Climine Runtime Page Configuration files is the same for both GET and POST parameters. You can directly reference the parameter names using the <code>{{parameter_name}}</code> syntax.</p>"},{"location":"port/","title":"port","text":"<p>The <code>port</code> property allows you to specify the port that the Climine Runtime application will listen on. The default port is 8080.</p> <p>Think of a port as a virtual gateway through which data flows in and out of your computer or server. Just like a physical port on a ship or an airport terminal, a network port acts as a designated point of entry or exit for communication between devices over a network, such as the internet.</p> <p>Imagine your computer or server as a busy office building with multiple departments, each handling different tasks. Ports serve as the doors or entrances to these departments, allowing data packets to enter and exit specific areas of the building based on their intended destination.</p>"},{"location":"port/#customizing-the-port","title":"Customizing the Port","text":"<p>In the configuration file, you can specify a custom port number for your Climine Runtime application. For example, if you want your application to listen on port 3000, you can set the port property as follows:</p> config.json<pre><code>{\n    \"port\": 3000\n}\n</code></pre> <p>With this configuration, your Climine Runtime application will listen on port 3000 instead of the default port 8080. This can be useful if you have other services running on port 8080 or if you prefer a different port for your application.</p> <p>Port Conflicts</p> <p>When specifying a custom port, make sure it is not already in use by another application on your system. Otherwise, you may encounter port conflicts that prevent your Climine Runtime application from starting.</p>"},{"location":"port_flag/","title":"Port","text":""},{"location":"port_flag/#specify-port-number-on-the-command-line","title":"Specify port number on the command line","text":"<p>To specify the port number on the command line, you can use the <code>--port</code> flag with the <code>climine</code> command. The <code>--port</code> flag allows you to specify the port number where you want to run the project.</p> <p>Port Conflicts</p> <p>When specifying a custom port, make sure it is not already in use by another application on your system. Otherwise, you may encounter port conflicts that prevent your Climine Runtime application from starting.</p>"},{"location":"port_flag/#syntax","title":"Syntax","text":"<pre><code>climine --port PORT_NUMBER\n</code></pre> <p>Replace <code>PORT_NUMBER</code> with the desired port number where you want to run the project.</p>"},{"location":"port_flag/#example","title":"Example","text":"<p>To run the project on port 3000, you can use the following command:</p> <pre><code>climine --port 3000\n</code></pre> <p>Default Port</p> <p>If you do not specify a port number using the <code>--port</code> flag, the Climine Runtime application will listen on the default port 8080.</p> <p>Multiple Flags</p> <p>You can use multiple flags with the <code>climine</code> command to customize the behavior of your Climine Runtime application. For example, you can combine the <code>--port</code> flag with other flags like <code>--config</code> or <code>--env</code> to further customize the runtime environment.</p>"},{"location":"rate/","title":"Rate Limiting","text":"<p>Rate limiting is a way to control the amount of incoming and outgoing traffic to or from a network. It is used to prevent abuse and ensure that the network is not overwhelmed by too many requests. Rate limiting can be implemented in various ways, such as by limiting the number of requests per second, per minute, or per hour. It can also be used to limit the amount of data that can be transferred in a given time period. Rate limiting is often used in web applications to prevent denial of service attacks and other types of abuse. It can also be used to ensure that a service is available to all users, rather than being monopolized by a small number of users. Rate limiting can be implemented at various levels of the network stack, such as at the application layer, the transport layer, or the network layer. It can also be implemented in hardware or software, depending on the requirements of the network. Rate limiting can be a complex topic, but it is an important tool for ensuring the stability and security of a network.</p>"},{"location":"rate/#implementing-rate-limiting-in-climine-runtime","title":"Implementing Rate Limiting in Climine Runtime","text":"<p>In Climine Runtime, you can implement rate limiting to control the number of requests that are made to your Climine Runtime Page in a given time period.</p> <p>To implement rate limiting in Climine Runtime, you can use the <code>iplimit</code> property in your Climine Runtime Page Configuration file. The <code>iplimit</code> property allows you to limit the number of requests that can be made to your Climine Runtime Page from a single IP address in a given time period.</p>"},{"location":"rate/#syntax","title":"Syntax","text":"<p>The <code>iplimit</code> property expects a string value in the format <code>requests/time_period</code>, where: - <code>requests</code> is the maximum number of requests that can be made from a single IP address. - <code>time_period</code> is the time period in which the requests are counted. The time period is specified in seconds.</p> <p>Here's an example of how you can implement rate limiting in your Climine Runtime Page Configuration file: <pre><code>{\n    \"iplimit\": \"2/5\",\n}\n</code></pre> In this example, the <code>iplimit</code> property limits the number of requests that can be made from a single IP address to 2 requests in 5 seconds.</p>"},{"location":"rate/#handling-rate-limit-exceeded","title":"Handling Rate Limit Exceeded","text":"<p>When the rate limit is exceeded, Climine Runtime returns a <code>429 Too Many Requests</code> status code to the client. The client can then handle the rate limit exceeded error and take appropriate action, such as retrying the request after a delay.</p> <p>Note</p> <p>Please visit Error Handling to learn more about handling errors in Climine Runtime.</p>"},{"location":"req/","title":"Making Requests","text":""},{"location":"req/#api-requests","title":"API Requests","text":"<p>In web development, API requests play a vital role in fetching data from external sources or interacting with backend services. These requests are made to specific endpoints on servers, allowing clients to retrieve information, submit data, or perform other actions.</p> <p>API (Application Programming Interface) requests are HTTP requests sent from a client (such as a web browser or a mobile app) to a server, typically to retrieve or manipulate data. These requests follow the HTTP protocol and can use different HTTP methods, such as GET, POST, PUT, DELETE, etc., depending on the desired action.</p>"},{"location":"req/#endpoint-configuration","title":"Endpoint Configuration","text":"<p>In Climine Runtime, API requests are configured within the Climine Runtime Page Configuration file. Each API request is defined as an object with specific properties that determine how the request is made and processed. Here's an example of an API request configuration in a Climine Runtime Page Configuration file:</p> index.json<pre><code>{\n    \"request1\": {\n        \"to\": \"https://api.example.com/data\",\n        \"method\": \"GET\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n}\n</code></pre> <p>In this example, the <code>request1</code> object defines an API request that sends a <code>GET</code> request to <code>https://api.example.com/data</code> with a <code>Content-Type</code> header set to <code>application/json</code>.</p>"},{"location":"req/#properties-of-an-api-request","title":"Properties of an API Request","text":"<p>An API request in Climine Runtime can have the following properties:</p>"},{"location":"req/#on","title":"<code>on</code>","text":"<p>The <code>on</code> proeprty specifies on which request method (the method that the visitor uses to access the page) the request should be made. The value of this property can be a list of request methods. If the <code>on</code> property is not specified, the request will be made on all request methods.</p>"},{"location":"req/#to","title":"<code>to</code>","text":"<p>The <code>to</code> property specifies the URL of the endpoint to which the request is made. This URL can be an absolute URL or a relative URL, depending on the target server.</p>"},{"location":"req/#method","title":"<code>method</code>","text":"<p>The <code>method</code> property specifies the HTTP method used for the request. Common HTTP methods include <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>PATCH</code>, etc. The method determines the type of action performed on the server.</p>"},{"location":"req/#headers","title":"<code>headers</code>","text":"<p>The <code>headers</code> property is an object that contains key-value pairs representing the HTTP headers sent with the request. Headers can include information such as content type, authorization tokens, cookies, etc.</p>"},{"location":"req/#body","title":"<code>body</code>","text":"<p>The <code>body</code> property contains the data sent with the request, typically used for <code>POST</code>, <code>PUT</code>, or <code>PATCH</code> requests. The body can be in various formats, such as JSON, form data, or plain text.</p> <p>Note</p> <p>The <code>body</code> property is optional and may not be required for all types of requests. Also make sure to not expose sensitive information in the body of the request as it can be exposed in logs or other places.</p>"},{"location":"req/#require","title":"<code>require</code>","text":"<p>The <code>require</code> property expects an object that contains a mapping of required variables for the request to a default value. This property is useful when you want to ensure that certain variables are present in the request object.</p> <p>When the default value is set to <code>null</code>, Climine Runtime will throw an error if the required variable is not available, and the request will not be aborted.</p> <p>Note</p> <p>Climine Runtime is fault-tolerant and will not crash if a request fails. Instead, it will log the error and continue processing other requests.</p>"},{"location":"respond/","title":"Respond","text":""},{"location":"respond/#responding-json","title":"Responding JSON","text":"<p>In Climine Runtime, you can respond to requests with JSON data using the <code>respond</code> property in the Page Configuration file. This property allows you to define the JSON response that the server sends back to the client when the page is accessed.</p> <p>Note</p> <p>When the <code>respond</code> property is defined and interpreted, Climine Runtime will ignore the rest of the page/process and send the JSON response to the client.</p> <p>Here's an example of a JSON response configuration in a Climine Runtime Page Configuration file:</p> index.json<pre><code>{\n    \"respond\": {\n        \"yourKey\": \"yourValue\"\n    }\n}\n</code></pre> <p>In this example, the <code>respond</code> object defines a JSON response with a key-value pair of <code>yourKey: yourValue</code>. When the page is accessed, the server will respond with this JSON data, even if there are other processes defined in the page or Page Template exisits.</p>"},{"location":"template/","title":"Introduction","text":"<p>Templating allows developers to create dynamic web pages by injecting dynamic content into static HTML files. This dynamic content can include data retrieved from API requests, environment variables, or other sources, enabling personalized and interactive user experiences.</p>"},{"location":"templating_var/","title":"Variables","text":""},{"location":"templating_var/#variables","title":"Variables","text":"<p>Variables in Climine Runtime Page Templates are placeholders that are replaced with actual values during the rendering process. They allow you to inject dynamic content into your page templates and customize the output based on the context in which the page is rendered. They are enclosed in double curly braces <code>{{ variable_name }}</code> and can represent a wide range of values, including strings, numbers, objects, arrays, and more.</p> <p>Example Usage: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;User Profile&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome, {{ user[name] }}!&lt;/h1&gt;\n    &lt;p&gt;Email: {{ user[email] }}&lt;/p&gt;\n    &lt;p&gt;Age: {{ user[age] }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>In this example, <code>{{ user[name] }}</code>, <code>{{ user[email] }}</code>, and <code>{{ user[age] }}</code> are variables that will be replaced with the actual user data when the page is rendered. The values of these variables can be provided dynamically based on the user's profile information.</p>"},{"location":"templating_var/#request-response-variables","title":"Request Response Variables","text":"<p>When the API request defined in the Climine Runtime Page Configuration file is executed, the response data is stored in variables that can be accessed within the page template. These variables are named based on the request key and the response data structure.</p> <p>For example, if you have an API request named <code>request1</code> that fetches user data from an external API, the response data can be accessed using the variable <code>{{ request1[data] }}</code>. You can then access specific fields within the response data using dot notation, such as <code>{{ request1[data][name] }}</code> to access the user's name.</p> <p>index.json<pre><code>{\n    \"request1\": {\n        \"to\": \"https://api.example.com/user\",\n        \"method\": \"GET\"\n    }\n}\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;User Profile&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome, {{ request1[data][name] }}!&lt;/h1&gt;\n    &lt;p&gt;Email: {{ request1[data][email] }}&lt;/p&gt;\n    &lt;p&gt;Age: {{ request1[data][age] }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>In this example, the response data from <code>request1</code> is accessed using <code>{{ request1[data] }}</code>, and specific fields like <code>name</code>, <code>email</code>, and <code>age</code> are accessed using square brackets notation.</p>"},{"location":"templating_var/#environment-variables","title":"Environment Variables","text":"<p>Environment variables are special variables that are sourced from the environment in which Climine Runtime is running. They are typically defined outside of your Climine Runtime configuration and can be accessed within your Climine Runtime Page Configuration files. Environment variables provide a convenient way to store sensitive information like API keys, database credentials, and configuration settings.</p> <p>Please visit Environment Variables to learn more about defining environment variables in Climine Runtime.</p> <p>To access an environment variable in your Climine Runtime Page Template, it must first be imported in the Climine Runtime Page Configuration file using the <code>use</code> property. Once imported, you can access the environment variable in your page template using the <code>{{ memory[ENV_VAR_NAME] }}</code> syntax.</p> <p>Please visit Accessing Environment Variables to learn more about importing environment variables in Climine Runtime.</p> <p>Example Usage: index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Environment Variables&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;DATABASE_HOST: {{ memory[DATABASE_HOST] }}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Danger</p> <p>DO NOT expose sensitive information like API keys, database credentials, or other secrets directly in your page templates.</p>"},{"location":"templating_var/#request-parameters","title":"Request Parameters","text":"<p>Request parameters are variables that are passed as part of the API request URL or body. They can be used to customize the behavior of the API request and fetch specific data based on user input or other dynamic factors.</p> <p>Accessing request parameters in your Climine Runtime Page Template is the same as accessing them in the Climine Runtime Page Configuration file. You can use the <code>{{ PARAM_NAME }}</code> syntax to access request parameters within your page template.</p> <p>Example Usage: index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Greetings {{ name }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, {{ name }}!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>In this example, the <code>name</code> request parameter is accessed using <code>{{ name }}</code> within the page template.</p> <p>To learn more about request parameters, please read the <code>Parameters</code> section in the  Parameters documentation.</p>"},{"location":"blog/","title":"Blog","text":"<p>This is the official blog of Climine Runtime. Here you will find articles, tutorials, and other resources to help you get started with Climine Runtime and build powerful web applications.</p>"},{"location":"blog/2024/05/05/install-climine-runtime-through-github-releases-on-windows/","title":"Installing Climine Runtime on Windows through Github Releases on Windows","text":""},{"location":"blog/2024/05/05/install-climine-runtime-through-github-releases-on-windows/#installing-climine-runtime-on-windows-a-step-by-step-guide","title":"Installing Climine Runtime on Windows: A Step-by-Step Guide","text":"<p>Hello Developers! In this post, we will dive into the process of installing Climine Runtime on your Windows Machine through Github Releases!</p>"},{"location":"blog/2024/05/05/install-climine-runtime-through-github-releases-on-windows/#downloading-the-latest-release","title":"Downloading the Latest Release:","text":"<p>To download the Latest Release, follow these steps:</p> <ol> <li> <p>Head to Climine Runtime: Head over to Climine Runtime, and click the <code>GITHUB</code> button. This will redirect you to the Github Repository of Climine Runtime</p> <p></p> </li> <li> <p>Navigate to Releases: Once the Github Repo has been loaded, navigate to the <code>Releases</code> section of the repository</p> <p></p> </li> <li> <p>Go to Latest Release: After the releases page is loaded, click on the release link with <code>Latest</code> tag</p> <p></p> </li> <li> <p>Download the Release: After opening the latest release page, scroll down and click on the climine-runtime-win executable link. This will download the Climine Runtime Installer.</p> <p></p> </li> </ol>"},{"location":"blog/2024/05/05/install-climine-runtime-through-github-releases-on-windows/#installing-climine-runtime","title":"Installing Climine Runtime","text":"<p>After downloading the latest release, run the installer (by double clicking on the downloaded file)</p> <ol> <li> <p>Accept the License Agreement: The installer will prompt you to accept the license agreement. Climine Runtime is licensed under MIT</p> <p></p> </li> <li> <p>(Optional) Create Desktop Shortcut: Optionally, you can create desktop shortcuts for Climine Runtime</p> <p></p> </li> <li> <p>Next, Click on Install</p> </li> <li> <p>Click on Finish</p> </li> </ol> <p>And there you have it! You have installed Climine Runtime on your Windows Machine!</p>"},{"location":"blog/2024/05/01/what-is-climine-runtime/","title":"What is Climine Runtime?","text":""},{"location":"blog/2024/05/01/what-is-climine-runtime/#introducing-climine-runtime-simplifying-web-development","title":"Introducing Climine Runtime: Simplifying Web Development","text":"<p>Are you tired of wrestling with complex backend setups and server-side scripting languages every time you want to create a dynamic website? Enter Climine Runtime \u2013 a lightweight and intuitive runtime environment designed to streamline the web development process.</p>"},{"location":"blog/2024/05/01/what-is-climine-runtime/#what-is-climine-runtime_1","title":"What is Climine Runtime?","text":"<p>Climine Runtime is a powerful yet straightforward tool that empowers developers to build dynamic websites without the headaches of traditional backend configurations. It allows you to seamlessly integrate API responses directly into your HTML markup, transforming static designs into interactive web applications with ease.</p>"},{"location":"blog/2024/05/01/what-is-climine-runtime/#who-can-benefit","title":"Who Can Benefit?","text":""},{"location":"blog/2024/05/01/what-is-climine-runtime/#beginners","title":"Beginners","text":"<p>If you're new to web development, Climine Runtime provides a user-friendly solution to dive into dynamic web content creation without overwhelming complexity. Say goodbye to steep learning curves and hello to instant results.</p>"},{"location":"blog/2024/05/01/what-is-climine-runtime/#small-projects","title":"Small Projects","text":"<p>Whether you're prototyping a new idea or launching a simple dynamic website, Climine Runtime is the perfect companion. It enables you to bring your vision to life quickly and efficiently, without the need for extensive backend infrastructure.</p> <p>But Climine Runtime isn't just for beginners and small projects \u2013 it's for anyone looking to simplify their web development workflow and focus on what truly matters: creating exceptional user experiences.</p> <p>Stay tuned for more updates and tutorials on how to harness the full potential of Climine Runtime for your next web project!</p>"},{"location":"blog/2024/05/01/what-is-climine-runtime/#get-started-today","title":"Get Started Today","text":"<p>Ready to revolutionize your web development process? Visit climine.github.io/runtime to learn more and start building dynamic websites with ease.</p> <p>Stay tuned for more exciting updates from the runtime team. Happy coding!</p>"},{"location":"string/","title":"Introduction","text":""},{"location":"string/#string-functions","title":"String Functions","text":"<p>Like any other template language, Climine Runtime provides a set of string functions that can be used to manipulate strings. These functions are used to perform operations like converting strings to uppercase, lowercase, title case, etc.</p> <p>The scope of these functions is limited to the string they are applied to. They do not affect the original string and return a new string with the desired transformation.</p> <p>These are global functions that can be used anywhere in your Climine Runtime Project.</p>"},{"location":"string/capitalize/","title":"capitalize","text":"<p><code>capitalize</code> is a method that returns a copy of the string with the first character capitalized and the rest lowercased.</p> <p>This method does not require any arguments.</p>"},{"location":"string/capitalize/#syntax","title":"Syntax","text":"<pre><code>{{ string.capitalize() }}\n</code></pre>"},{"location":"string/capitalize/#example","title":"Example","text":"index.html<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{{ title.capitalize() }}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;{{ title.capitalize() }}&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Original String Unchanged</p> <p>The <code>capitalize</code> method does not modify the original string. It returns a new string with the desired transformation.</p>"},{"location":"string/length/","title":"length","text":"<p><code>length</code> is a method that returns the length (number of characters) of a string.</p> <p>This method does not require any arguments.</p>"},{"location":"string/length/#syntax","title":"Syntax","text":"<pre><code>{{ string.length() }}\n</code></pre>"},{"location":"string/length/#example","title":"Example","text":"index.html<pre><code>...\n&lt;div&gt;\n    {% if message.length() &gt; 140 %}\n        &lt;p&gt;Message is too long&lt;/p&gt;\n    {% else %}\n        &lt;p&gt; {{ message }} &lt;/p&gt;\n    {% endif %}\n&lt;/div&gt;\n...\n</code></pre> <p>In the example above, the length of the <code>message</code> string is checked. If the length of the string is greater than 140, a message is displayed. Otherwise, the message is displayed as is.</p>"},{"location":"string/lower/","title":"lower","text":"<p><code>lower</code> is a method that converts all the characters in a string to lowercase.</p> <p>This method does not require any arguments.</p>"},{"location":"string/lower/#syntax","title":"Syntax","text":"<pre><code>{{ string.lower() }}\n</code></pre>"},{"location":"string/lower/#example","title":"Example","text":"index.json<pre><code>{\n    \"request1\": {\n        \"to\": \"https://api.example.com/data&amp;q={{email.lower()}}\",\n        \"method\": \"GET\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        },\n        \"require\": {\n            \"email\": null\n        }\n    }\n}\n</code></pre> <p>In the example above, the <code>email</code> string is converted to lowercase before being used in the URL.</p> <p>Original String Unchanged</p> <p>The <code>lower</code> method does not modify the original string. It returns a new string with the desired transformation.</p>"},{"location":"string/replace/","title":"replace","text":"<p><code>replace</code> is a method that replaces a specified value with another value in a string.</p> <p>This method takes two arguments:</p> <ul> <li><code>old</code>: The value to be replaced.</li> <li><code>new</code>: The value to replace <code>old</code> with.</li> </ul>"},{"location":"string/replace/#syntax","title":"Syntax","text":"<pre><code>{{ string.replace(\"old\", \"new\") }}\n</code></pre>"},{"location":"string/replace/#example","title":"Example","text":"index.html<pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;{{ title.replace(\" \", \"-\") }}&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In the example above, all spaces in the <code>title</code> string are replaced with hyphens.</p> <p>Original String Unchanged</p> <p>The <code>replace</code> method does not modify the original string. It returns a new string with the desired transformation.</p>"},{"location":"string/reverse/","title":"reverse","text":"<p><code>reverse</code> is a method that reverses the order of the elements in an array.</p> <p>This method does not require any arguments.</p>"},{"location":"string/reverse/#syntax","title":"Syntax","text":"<pre><code>{{ array.reverse() }}\n</code></pre>"},{"location":"string/reverse/#example","title":"Example","text":"index.html<pre><code>&lt;ul&gt;\n    {% for item in items.reverse() %}\n        &lt;li&gt;{{ item }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre> <p>In the example above, the <code>items</code> array is reversed before being used in the loop.</p> <p>Original JSON Unchanged</p> <p>The <code>reverse</code> method does not modify the original array. It returns a new array with the desired transformation.</p>"},{"location":"string/split/","title":"split","text":"<p><code>split</code> is a method that splits a string into a list of strings based on a delimiter. The delimiter is a string that separates each element in the list. If no delimiter is specified, the string is split by whitespace.</p> <p>This method takes one optional argument:</p> <ul> <li><code>delimiter</code>: The string used to split the original string.</li> </ul>"},{"location":"string/split/#syntax","title":"Syntax","text":"<pre><code>{{ string.split(\"delimiter\") }}\n</code></pre>"},{"location":"string/split/#example","title":"Example","text":"index.html<pre><code>&lt;ul&gt;\n    {% for word in sentence.split(\" \") %}\n        &lt;li&gt;{{ word }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre> <p>In the example above, the <code>sentence</code> string is split by spaces before being used in the loop.</p> <p>Original String Unchanged</p> <p>The <code>split</code> method does not modify the original string. It returns a new list of strings with the desired transformation.</p>"},{"location":"string/trim/","title":"trim","text":"<p><code>trim</code> is a method that removes whitespace from both ends of a string.</p> <p>This method does not require any arguments.</p>"},{"location":"string/trim/#syntax","title":"Syntax","text":"<pre><code>{{ string.trim() }}\n</code></pre>"},{"location":"string/trim/#example","title":"Example","text":"index.html<pre><code>&lt;p&gt;{{ text.trim() }}&lt;/p&gt;\n</code></pre> <p>In the example above, the <code>text</code> string is trimmed before being used in the paragraph. It means that any leading or trailing whitespace is removed.</p> <p>Original String Unchanged</p> <p>The <code>trim</code> method does not modify the original string. It returns a new string with the desired transformation.</p>"},{"location":"blog/archive/2024/","title":"2024","text":""}]}