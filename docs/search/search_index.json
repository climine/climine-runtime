{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Getting Started","text":"<p>Climine Runtime is a lightweight, straightforward and fault-tolerant runtime environment for web development designed to streamline the process of building dynamic websites, without the complexity of traditional backend setups or server-side scripting languages. With Climine Runtime, developers can easily convert static HTML/CSS/JS designs into dynamic web applications by integrating API responses directly into their HTML markup.</p>"},{"location":"index.html#who-is-it-for","title":"Who is it for?","text":"<ul> <li> <p>Beginners: Climine Runtime offers a user-friendly solution for those new to web development, providing a gentle introduction to dynamic web content.</p> </li> <li> <p>Small Projects: For quickly prototyping and deploying simple dynamic websites without the need for extensive backend infrastructure.</p> </li> <li> <p>API Integration: Climine Runtime is perfect for integrating API responses directly into your HTML markup, allowing you to build dynamic web applications with ease.</p> </li> </ul>"},{"location":"index.html#knowledge-prerequisites","title":"Knowledge Prerequisites","text":"<ul> <li> <p>HTML/CSS/JS: A basic understanding of HTML, CSS, and JavaScript is required to get started with Climine Runtime.</p> </li> <li> <p>APIs: Familiarity with APIs and how to consume them will be beneficial when integrating external data sources into your web applications.</p> </li> <li> <p>Javascript Object Notation (JSON): Understanding JSON data structures will be helpful when working with API responses and configuration files.</p> </li> </ul>"},{"location":"config.html","title":"Introduction","text":"<p>The configuration file is a JSON file that contains the configuration for a Climine Runtime application. The configuration file is optional and if not provided, the default configuration will be used. The configuration file's path can be specified using the <code>--config</code> option when running the application. The configuration file should be a JSON object.</p> <p>The following is an example of a configuration file:</p> config.json<pre><code>{\n    \"port\": 3000,\n    \"dir\": \"./\",\n    \"env\": \".env\",\n    \"errors\": {\n        \"404\": \"/error/404\",\n        \"500\": \"/error/500\"\n    }\n}\n</code></pre>"},{"location":"dir.html","title":"dir","text":"<p>The <code>dir</code> property allows you to specify the directory where the Climine Runtime will look for files to serve.  By default, the Climine Runtime will serve files from the current working directory where the application is started.</p>"},{"location":"dir.html#customizing-the-directory","title":"Customizing the Directory","text":"<p>In the configuration file, you can specify a custom directory for your Climine Runtime application. For example, if you want your application to serve files from a directory named <code>public</code>, you can set the dir property as follows:</p> config.json<pre><code>{\n    \"dir\": \"public\"\n}\n</code></pre> <p>With this configuration, your Climine Runtime application will serve files from the <code>public</code> directory instead of the current working directory. This can be useful if you have a specific folder structure for your application or if you want to separate static files from other project files.</p>"},{"location":"env.html","title":"env","text":"<p>The <code>env</code> property allows you to specify the location of an environment variable file relative to the root directory of your Climine Runtime application, specified by the dir property.</p> <p>Environment variables are dynamic values that can affect the behavior of software applications. They are used to store configuration settings, sensitive information, and other parameters that may vary between different environments. Environment variables provide a flexible way to manage configuration values without hardcoding them into the application code.</p> <p>By default, the Climine Runtime does not load environment variables from a file. However, you can specify an env property in the configuration file to load environment variables from a file named <code>.env</code> located in a specific directory.</p>"},{"location":"env.html#example","title":"Example:","text":"config.json<pre><code>{\n    \"env\": \".env\"\n}\n</code></pre> <p>In this example, the Climine Runtime will load environment variables from a file named <code>.env</code> located in the root directory of the application. The file should contain key-value pairs in the format <code>KEY=VALUE</code>, with each pair on a separate line.</p> <p><code>.env</code>: .env<pre><code>API_KEY=your-api-key\nsecret=your-secret\n</code></pre></p>"},{"location":"env_var.html","title":"Environment Variables","text":"<p>These are variables that are sourced from the environment in which Climine Runtime is running. They are typically defined outside of your Climine Runtime configuration and can be accessed within your Climine Runtime Page Configuration files. Environment variables provide a convenient way to store sensitive information like API keys, database credentials, and configuration settings.</p>"},{"location":"env_var.html#accessing-environment-variables","title":"Accessing Environment Variables","text":"<p>To access an environment variable in your Climine Runtime Page Configuration file:</p> <ol> <li> <p>Define the environment variable in the environment where Climine Runtime is running. Click here to learn how to define environment variables.</p> </li> <li> <p>Import the environment variable in your Climine Runtime Page Configuration file using the following syntax:     index.json<pre><code>{\n    \"use\": [\"ENV_VAR_NAME\"]\n}\n</code></pre>     Replace <code>ENV_VAR_NAME</code> with the name of the environment variable you want to access.</p> <p>Note</p> <p><code>use</code> property expects an array of environment variable names. You can import multiple environment variables by providing their names in the array.</p> </li> <li> <p>Use the imported environment variable in your Climine Runtime Page Configuration file.     Syntax: <code>{{ memory[ENV_VAR_NAME] }}</code> <pre><code>{\n    \"request1\": {\n        \"to\": \"http://www.randomnumberapi.com/api/v1.0/random?min={{min}}&amp;max={{max}}&amp;count={{count}}\",\n        \"method\": \"GET\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer {{memory[token]}}\"\n        }\n    }\n}\n</code></pre>     In this example, the <code>token</code> environment variable is used in the <code>Authorization</code> header of the <code>request1</code>'s endpoint.</p> </li> </ol>"},{"location":"error.html","title":"errors","text":"<p>The <code>errors</code> property in the configuration file is an object that contains a mapping of error codes to error pages. When an error occurs, Climine Runtime will redirect the user to the specified error page based on the error code. The error pages should be relative paths to the root directory of the application.</p>"},{"location":"error.html#error-page-structure","title":"Error Page Structure","text":"<p>For each error code, you can specify either a static HTML file, a Climine Runtime Page Configuration or both (Climine Runtime Dynamic Page). Climine Runtime will use the specified files to render the error page content when the corresponding HTTP status code is encountered.</p> config.json<pre><code>{\n    \"errors\": {\n        \"404\": \"errors/not-found.html\",\n        \"500\": \"errors/server-error.html\"\n    }\n}\n</code></pre> <p>In the above example, Climine is configured to use the not-found.html file for handling 404 Not Found errors and the server-error.html file for handling 500 Internal Server Errors.</p> <p>Note</p> <p>Ensure that the paths specified in the errors object are relative to the root directory of your Climine Runtime application.</p>"},{"location":"example.html","title":"Usage","text":"<p>Let's walk through an example of using Climine Runtime to create a simple dynamic website. We'll start by defining our project structure and then showcase the contents of the configuration files, HTML markup, and API request file.</p>"},{"location":"example.html#project-structure","title":"Project Structure","text":"<pre><code>my-climine-project/\n\u251c\u2500\u2500 config.json\n\u251c\u2500\u2500 index.html\n\u2514\u2500\u2500 index.json\n</code></pre>"},{"location":"example.html#configuration-configjson","title":"Configuration (config.json)","text":"config.json<pre><code>{\n    \"port\": 8080,\n    \"dir\": \"./\",\n    \"errors\": {\n        \"404\": \"/error/404/\"\n    }\n}\n</code></pre>"},{"location":"example.html#api-request-file-indexjson","title":"API Request File (index.json)","text":"index.json<pre><code>{\n    \"request1\": {\n        \"to\": \"https://api.example.com/data&amp;q={{query}}\",\n        \"method\": \"GET\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        },\n        \"require\": {\n            \"query\": null\n        }\n    }\n}\n</code></pre>"},{"location":"example.html#html-markup-indexhtml","title":"HTML Markup (index.html)","text":"index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;My Climine Project&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Welcome to Climine Runtime!&lt;/h1&gt;\n  &lt;p&gt;This is a dynamic website powered by Climine.&lt;/p&gt;\n  &lt;p&gt;Here's some dynamic content:&lt;/p&gt;\n  &lt;p&gt;{{ request1.responseKey }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In this example, <code>config.json</code> defines the configuration for the Climine Runtime. <code>index.html</code> contains the HTML markup, while <code>index.json</code> defines an API request that fetches dynamic data to be inserted into that HTML markup</p>"},{"location":"if_condition.html","title":"If Statements","text":"<p>Climine Runtime supports conditional statements, allowing developers to control the flow of content based on specific conditions. Conditional statements can be used to display or hide content, execute different code blocks, or handle special cases within HTML files.</p>"},{"location":"if_condition.html#if-condition","title":"If Condition","text":"<p>These conditions can involve comparisons, logical operations, or the evaluation of variables or expressions. Conditional statements are enclosed within {% if %} and {% endif %} tags, with an optional {% else %} tag for handling alternative cases.</p>"},{"location":"if_condition.html#basic-if-condition","title":"Basic If Condition","text":"index.html<pre><code>{% if user[age] &gt;= 18 %}\n    &lt;p&gt;Welcome, you are an adult!&lt;/p&gt;\n{% endif %}\n</code></pre> <p>In this example, the content inside the <code>{% if %}</code> block is displayed only if the user's age is greater than or equal to 18.</p> <p>Warning</p> <p>If the variables used in the conditional statement are not defined or are invalid, it is set to 0 by default. Whereas, while displaying the value of a variable, if it is not defined or invalid, it is displayed as {{ key }}, where <code>key</code> is the variable name.</p>"},{"location":"if_condition.html#if-else-condition","title":"If-Else Condition","text":"index.html<pre><code>{% if user[age] &gt;= 18 %}\n    &lt;p&gt;Welcome, you are an adult!&lt;/p&gt;\n{% else %}\n    &lt;p&gt;Sorry, you are a minor!&lt;/p&gt;\n{% endif %}\n</code></pre> <p>In this example, the content inside the <code>{% if %}</code> block is displayed if the user's age is greater than or equal to 18. Otherwise, the content inside the <code>{% else %}</code> block is displayed.</p> <p>Note</p> <p>The <code>{% else %}</code> block is optional and can be omitted if there is no need to handle alternative cases.</p>"},{"location":"if_condition.html#nested-if-condition","title":"Nested If Condition","text":"<p>Climine Runtime supports nested if conditions, allowing developers to nest conditional statements within each other to handle complex logic and hierarchical structures. When nesting if conditions, it is must to use the [n] notation to differentiate between nested levels.</p> index.html<pre><code>{% if condition %}\n    &lt;!-- Outer if block content --&gt;\n    {% if[1] nestedCondition %}\n        &lt;!-- Inner if block content --&gt;\n    {% else[1] %}\n        &lt;!-- Inner else block content --&gt;\n    {% endif[1] %}\n{% else %}\n    &lt;!-- Outer else block content --&gt;\n{% endif %}\n</code></pre> <p>Nested if conditions can be used to create multi-level conditional statements that execute different code blocks based on multiple conditions.</p>"},{"location":"installation.html","title":"Installation","text":"<p>To install Climine Runtime, you have a couple of options:</p> <ul> <li> <p>Clone the repository:   <pre><code>git clone https://github.com/climine/climine-runtime.git\n</code></pre></p> </li> <li>Navigate to the project directory:   <pre><code>cd runtime\n</code></pre></li> <li>Install dependencies:   <pre><code>npm install\n</code></pre></li> <li>Build the project:   <pre><code>npm run build\n</code></pre></li> <li>The compiled binary will be available in the dist directory.</li> </ul> <p>That's it! You're now ready to use Climine Runtime.</p>"},{"location":"installation.html#using-pre-built-binaries","title":"Using Pre-built Binaries","text":"<p>You can download pre-built binaries for your operating system from the Releases page. Once downloaded, extract the archive and add the executable to your system's PATH.</p>"},{"location":"installation.html#compiling-from-source","title":"Compiling from Source","text":"<p>If pre-built binaries are unavailable for your operating system, you can compile Climine Runtime from source. Follow these steps:</p>"},{"location":"page.html","title":"Introduction","text":"<p>The Page Configuration file is a JSON file, such as <code>index.json</code> or <code>about.json</code>, serves as a central hub for defining various options and configurations specific to a particular page within your Climine Runtime application. This JSON file allows you to specify endpoints, layout options, data sources, and more, providing granular control over the behavior and content of individual pages.</p>"},{"location":"page.html#example-about-configuration","title":"Example: /about Configuration","text":"<p>The <code>about.json</code> file serves as a configuration file for defining the behavior and settings specific to the <code>about.html</code> page within your Climine Runtime application. This example illustrates how to configure endpoint for dynamic content retrieval.</p> <p><code>about.json</code> about.json<pre><code>\"request1\": {\n    \"to\": \"http://www.randomnumberapi.com/api/v1.0/random?min={{min}}&amp;max={{max}}&amp;count={{count}}\",\n    \"method\": \"GET\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer {{token}}\"\n    }\n}        \n</code></pre></p> <p>Now, the response of <code>request1</code> can be accessed in the <code>about.html</code> page using the following syntax:</p> about.html<pre><code>&lt;h1&gt;RANDOM NUMBER: {{request1}}&lt;/h1&gt;\n</code></pre>"},{"location":"param.html","title":"Parameters","text":"<p>In web development, parameters are values that are passed to a web page or script through the URL or form inputs. These parameters can be used to customize the behavior of the page or script based on user input. In Climine Runtime, you can access parameters sent with GET and POST requests to your Climine Runtime Page Configuration files.</p> <ol> <li> <p>GET Parameters: (aka. Query Parameters) These parameters are appended to the end of a URL in a key-value format, separated by ampersands (&amp;). They are commonly used in HTTP GET requests to pass data from the client to the server. For example, in the URL <code>https://example.com/search?q=keyword&amp;page=1</code>, <code>q</code> and <code>page</code> are GET parameters with values <code>keyword</code> and <code>1</code>, respectively.</p> </li> <li> <p>POST Parameters: These parameters are included in the body of an HTTP request, typically used in HTTP POST requests. Unlike query parameters, which are visible in the URL, request body parameters are hidden from view and can contain more data. Example of POST parameters in a request body: <pre><code>{\n    \"username\": \"john_doe\",\n    \"password\": \"password123\"\n}\n</code></pre> In this example, <code>username</code> and <code>password</code> are POST parameters with values <code>john_doe</code> and <code>password123</code>, respectively.</p> </li> </ol> <p>Climine Runtime allows you to access parameters sent with GET and POST requests. These parameters can be used to customize the behavior of your Climine Runtime Page based on the user input.</p>"},{"location":"param.html#accessing-parameters","title":"Accessing Parameters","text":"<p>Accessing parameters in Climine Runtime Page Configuration follows the same syntax as accessing environment variables. To access parameters in your Climine Runtime Page Configuration file, you can directly reference them using the <code>{{parameter_name}}</code> syntax.</p> <p>Here's an example of how you can access parameters in your Climine Runtime Page Configuration file: <pre><code>{\n    \"request1\": {\n        \"to\": \"https://api.example.com/search?q={{query}}&amp;page={{page}}\",\n        \"method\": \"GET\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n}\n</code></pre> In this example, the <code>query</code> and <code>page</code> parameters are accessed in the URL of <code>request1</code> to customize the search query and page number.</p> <p>Info</p> <p>The syntax to access parameters in Climine Runtime Page Configuration files is the same for both GET and POST parameters. You can directly reference the parameter names using the <code>{{parameter_name}}</code> syntax.</p>"},{"location":"port.html","title":"port","text":"<p>The <code>port</code> property allows you to specify the port that the Climine Runtime application will listen on. The default port is 8080.</p> <p>Think of a port as a virtual gateway through which data flows in and out of your computer or server. Just like a physical port on a ship or an airport terminal, a network port acts as a designated point of entry or exit for communication between devices over a network, such as the internet.</p> <p>Imagine your computer or server as a busy office building with multiple departments, each handling different tasks. Ports serve as the doors or entrances to these departments, allowing data packets to enter and exit specific areas of the building based on their intended destination.</p>"},{"location":"port.html#customizing-the-port","title":"Customizing the Port","text":"<p>In the configuration file, you can specify a custom port number for your Climine Runtime application. For example, if you want your application to listen on port 3000, you can set the port property as follows:</p> config.json<pre><code>{\n    \"port\": 3000\n}\n</code></pre> <p>With this configuration, your Climine Runtime application will listen on port 3000 instead of the default port 8080. This can be useful if you have other services running on port 8080 or if you prefer a different port for your application.</p> <p>Port Conflicts</p> <p>When specifying a custom port, make sure it is not already in use by another application on your system. Otherwise, you may encounter port conflicts that prevent your Climine Runtime application from starting.</p>"},{"location":"rate.html","title":"Rate Limiting","text":"<p>Rate limiting is a way to control the amount of incoming and outgoing traffic to or from a network. It is used to prevent abuse and ensure that the network is not overwhelmed by too many requests. Rate limiting can be implemented in various ways, such as by limiting the number of requests per second, per minute, or per hour. It can also be used to limit the amount of data that can be transferred in a given time period. Rate limiting is often used in web applications to prevent denial of service attacks and other types of abuse. It can also be used to ensure that a service is available to all users, rather than being monopolized by a small number of users. Rate limiting can be implemented at various levels of the network stack, such as at the application layer, the transport layer, or the network layer. It can also be implemented in hardware or software, depending on the requirements of the network. Rate limiting can be a complex topic, but it is an important tool for ensuring the stability and security of a network.</p>"},{"location":"rate.html#implementing-rate-limiting-in-climine-runtime","title":"Implementing Rate Limiting in Climine Runtime","text":"<p>In Climine Runtime, you can implement rate limiting to control the number of requests that are made to your Climine Runtime Page in a given time period.</p> <p>To implement rate limiting in Climine Runtime, you can use the <code>iplimit</code> property in your Climine Runtime Page Configuration file. The <code>iplimit</code> property allows you to limit the number of requests that can be made to your Climine Runtime Page from a single IP address in a given time period.</p>"},{"location":"rate.html#syntax","title":"Syntax","text":"<p>The <code>iplimit</code> property expects a string value in the format <code>requests/time_period</code>, where: - <code>requests</code> is the maximum number of requests that can be made from a single IP address. - <code>time_period</code> is the time period in which the requests are counted. The time period is specified in seconds.</p> <p>Here's an example of how you can implement rate limiting in your Climine Runtime Page Configuration file: <pre><code>{\n    \"iplimit\": \"2/5\",\n}\n</code></pre> In this example, the <code>iplimit</code> property limits the number of requests that can be made from a single IP address to 2 requests in 5 seconds.</p>"},{"location":"rate.html#handling-rate-limit-exceeded","title":"Handling Rate Limit Exceeded","text":"<p>When the rate limit is exceeded, Climine Runtime returns a <code>429 Too Many Requests</code> status code to the client. The client can then handle the rate limit exceeded error and take appropriate action, such as retrying the request after a delay.</p> <p>Note</p> <p>Please visit Error Handling to learn more about handling errors in Climine Runtime.</p>"},{"location":"req.html","title":"Making Requests","text":""},{"location":"req.html#api-requests","title":"API Requests","text":"<p>In web development, API requests play a vital role in fetching data from external sources or interacting with backend services. These requests are made to specific endpoints on servers, allowing clients to retrieve information, submit data, or perform other actions.</p> <p>API (Application Programming Interface) requests are HTTP requests sent from a client (such as a web browser or a mobile app) to a server, typically to retrieve or manipulate data. These requests follow the HTTP protocol and can use different HTTP methods, such as GET, POST, PUT, DELETE, etc., depending on the desired action.</p>"},{"location":"req.html#endpoint-configuration","title":"Endpoint Configuration","text":"<p>In Climine Runtime, API requests are configured within the Climine Runtime Page Configuration file. Each API request is defined as an object with specific properties that determine how the request is made and processed. Here's an example of an API request configuration in a Climine Runtime Page Configuration file:</p> index.json<pre><code>{\n    \"request1\": {\n        \"to\": \"https://api.example.com/data\",\n        \"method\": \"GET\",\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n}\n</code></pre> <p>In this example, the <code>request1</code> object defines an API request that sends a <code>GET</code> request to <code>https://api.example.com/data</code> with a <code>Content-Type</code> header set to <code>application/json</code>.</p>"},{"location":"req.html#properties-of-an-api-request","title":"Properties of an API Request","text":"<p>An API request in Climine Runtime can have the following properties:</p>"},{"location":"req.html#to","title":"<code>to</code>","text":"<p>The <code>to</code> property specifies the URL of the endpoint to which the request is made. This URL can be an absolute URL or a relative URL, depending on the target server.</p>"},{"location":"req.html#method","title":"<code>method</code>","text":"<p>The <code>method</code> property specifies the HTTP method used for the request. Common HTTP methods include <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>PATCH</code>, etc. The method determines the type of action performed on the server.</p>"},{"location":"req.html#headers","title":"<code>headers</code>","text":"<p>The <code>headers</code> property is an object that contains key-value pairs representing the HTTP headers sent with the request. Headers can include information such as content type, authorization tokens, cookies, etc.</p>"},{"location":"req.html#body","title":"<code>body</code>","text":"<p>The <code>body</code> property contains the data sent with the request, typically used for <code>POST</code>, <code>PUT</code>, or <code>PATCH</code> requests. The body can be in various formats, such as JSON, form data, or plain text.</p> <p>Note</p> <p>The <code>body</code> property is optional and may not be required for all types of requests. Also make sure to not expose sensitive information in the body of the request as it can be exposed in logs or other places.</p>"},{"location":"req.html#require","title":"<code>require</code>","text":"<p>The <code>require</code> property expects an object that contains a mapping of required variables for the request to a default value. This property is useful when you want to ensure that certain variables are present in the request object.</p> <p>When the default value is set to <code>null</code>, Climine Runtime will throw an error if the required variable is not available, and the request will not be aborted.</p> <p>Note</p> <p>Climine Runtime is fault-tolerant and will not crash if a request fails. Instead, it will log the error and continue processing other requests.</p>"},{"location":"template.html","title":"Introduction","text":"<p>Templating allows developers to create dynamic web pages by injecting dynamic content into static HTML files. This dynamic content can include data retrieved from API requests, environment variables, or other sources, enabling personalized and interactive user experiences.</p>"},{"location":"templating_var.html","title":"Variables","text":""},{"location":"templating_var.html#variables","title":"Variables","text":"<p>Variables in Climine Runtime Page Templates are placeholders that are replaced with actual values during the rendering process. They allow you to inject dynamic content into your page templates and customize the output based on the context in which the page is rendered. They are enclosed in double curly braces <code>{{ variable_name }}</code> and can represent a wide range of values, including strings, numbers, objects, arrays, and more.</p> <p>Example Usage: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;User Profile&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome, {{ user[name] }}!&lt;/h1&gt;\n    &lt;p&gt;Email: {{ user[email] }}&lt;/p&gt;\n    &lt;p&gt;Age: {{ user[age] }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>In this example, <code>{{ user[name] }}</code>, <code>{{ user[email] }}</code>, and <code>{{ user[age] }}</code> are variables that will be replaced with the actual user data when the page is rendered. The values of these variables can be provided dynamically based on the user's profile information.</p>"},{"location":"templating_var.html#request-response-variables","title":"Request Response Variables","text":"<p>When the API request defined in the Climine Runtime Page Configuration file is executed, the response data is stored in variables that can be accessed within the page template. These variables are named based on the request key and the response data structure.</p> <p>For example, if you have an API request named <code>request1</code> that fetches user data from an external API, the response data can be accessed using the variable <code>{{ request1[data] }}</code>. You can then access specific fields within the response data using dot notation, such as <code>{{ request1[data][name] }}</code> to access the user's name.</p> <p>index.json<pre><code>{\n    \"request1\": {\n        \"to\": \"https://api.example.com/user\",\n        \"method\": \"GET\"\n    }\n}\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;User Profile&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome, {{ request1[data][name] }}!&lt;/h1&gt;\n    &lt;p&gt;Email: {{ request1[data][email] }}&lt;/p&gt;\n    &lt;p&gt;Age: {{ request1[data][age] }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>In this example, the response data from <code>request1</code> is accessed using <code>{{ request1[data] }}</code>, and specific fields like <code>name</code>, <code>email</code>, and <code>age</code> are accessed using square brackets notation.</p>"},{"location":"templating_var.html#environment-variables","title":"Environment Variables","text":"<p>Environment variables are special variables that are sourced from the environment in which Climine Runtime is running. They are typically defined outside of your Climine Runtime configuration and can be accessed within your Climine Runtime Page Configuration files. Environment variables provide a convenient way to store sensitive information like API keys, database credentials, and configuration settings.</p> <p>Please visit Environment Variables to learn more about defining environment variables in Climine Runtime.</p> <p>To access an environment variable in your Climine Runtime Page Template, it must first be imported in the Climine Runtime Page Configuration file using the <code>use</code> property. Once imported, you can access the environment variable in your page template using the <code>{{ memory[ENV_VAR_NAME] }}</code> syntax.</p> <p>Please visit Accessing Environment Variables to learn more about importing environment variables in Climine Runtime.</p> <p>Example Usage: index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Environment Variables&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;DATABASE_HOST: {{ memory[DATABASE_HOST] }}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Danger</p> <p>DO NOT expose sensitive information like API keys, database credentials, or other secrets directly in your page templates.</p>"},{"location":"templating_var.html#request-parameters","title":"Request Parameters","text":"<p>Request parameters are variables that are passed as part of the API request URL or body. They can be used to customize the behavior of the API request and fetch specific data based on user input or other dynamic factors.</p> <p>Accessing request parameters in your Climine Runtime Page Template is the same as accessing them in the Climine Runtime Page Configuration file. You can use the <code>{{ PARAM_NAME }}</code> syntax to access request parameters within your page template.</p> <p>Example Usage: index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Greetings {{ name }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, {{ name }}!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>In this example, the <code>name</code> request parameter is accessed using <code>{{ name }}</code> within the page template.</p> <p>To learn more about request parameters, please read the <code>Parameters</code> section in the  Parameters documentation.</p>"}]}